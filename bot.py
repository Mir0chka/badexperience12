import asyncio
import os
import re
import twitchio
import openai
from twitchio.ext import commands
from functions import *

bot = commands.Bot(
    token=os.environ['TMI_TOKEN'],
    client_id=os.environ['CLIENT_ID'],
    nick=os.environ['BOT_NICK'],
    prefix=os.environ['BOT_PREFIX'],
    initial_channels=[os.environ['CHANNEL'], '#gold_manchannel', '#jastintw', ]
)


async def get_username(user_id, bot):
    try:
        user = await bot.get_user(user_id)
        return user.name
    except twitchio.dataclasses.errors.HTTPError:
        return f"UnknownUser_{user_id}"


user_data = load_user_data()
openai.api_key = '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'


# --------------------------------------------------------------------------------

@bot.event
async def event_ready():
    print(f"{os.environ['BOT_NICK']} is online!")
    ws = bot._ws
    await ws.send_privmsg(os.environ['CHANNEL'], f"/me has landed!")


@bot.command(name='info')
async def info(ctx):
    await ctx.send(
        f'‚û∫–°–ø–∏—Å–æ–∫ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: !about - –æ –±–æ—Ç–µ, !–ª–æ—Ç–µ—Ä–µ—è - —Å—ã–≥—Ä–∞—Ç—å –≤ –ª–æ—Ç–µ—Ä–µ—é, !password - —É–≥–∞–¥–∞—Ç—å –ø–∞—Ä–æ–ª—å –∫–∞–∫ –≤ —Å–º–µ—Ä—Ç–µ–ª–∫–∏[–í–µ—Ä—Å–∏—è 0.0.1], !pisuninfo - —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ—É –æ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏–∏ –ø–∏—Å—é–Ω–∞, !iqinfo - –¥–ª—è —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è, !–¥—Ä—É–≥–æ–µ - –¥—Ä—É–≥–æ–µ(–ª–æ–≥–∏—á–Ω–æ)')


@bot.command(name='about')
async def about(ctx):
    await ctx.send(
        f'*Ã•Àö–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ‡º∫@mirka_m_ —á–∏—Å—Ç–æ –≤ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª—è—Ö. –ù–µ –ø–æ–¥–ª–µ–∂–∏—Ç –≤–ª–∞–¥–µ–Ω–∏—é –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–º–∏ –ª–∏—Ü–∞–º–∏')


@bot.command(name='pisuninfo')
async def pisuninfo(ctx):
    await ctx.send(f'!pisun - —É–∑–Ω–∞—Ç—å —Å—É–¥—å–±—É –ø–∏—Å—é–Ω–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, !mypisun - —Ä–∞–∑–º–µ—Ä –ø–∏—Å—é–Ω–∞, !top10 - —Ä–µ–π—Ç–∏–Ω–≥ –ø–∏—Å—é–Ω–æ–≤, !top-10 - —Ä–µ–π—Ç–∏–Ω–≥ –ø–∏—Å—é–Ω–æ–≤ –≤ –∂–æ–ø–µ')


@bot.command(name='–¥—Ä—É–≥–æ–µ')
async def info(ctx):
    await ctx.send(
        f'‚û∫–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: !–ø–æ–¥–∞—Ä–æ–∫ - –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç –º–∞–ª–µ–Ω—å–∫–æ–π –¥–µ–≤–æ—á–∫–∏, !—Å–º—ç—Ä—Ç - —É–∑–Ω–∞–π—Ç–µ —Å–≤–æ—é –¥–∞—Ç—É —Å–º–µ—Ä—Ç–∏, !–≥–æ–ª–æ—Å - –µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ, –∫–∞–∫—É—é –∏–≥—Ä—É –≤—ã–±—Ä–∞—Ç—å, !askgpt [—Ç–µ–∫—Å—Ç] - –ø–æ–æ–±—â–∞–π—Ç–µ—Å—å —Å chatGPT')


@bot.command(name='iqinfo')
async def pisuninfo(ctx):
    await ctx.send(
        f'*Ã•Àö–ó–∞ –∏–¥–µ—é, –∫–∞–∫–æ–π —Ñ–∏–≥–Ω–µ–π –ø–æ—Å—Ç—Ä–∞–¥–∞—Ç—å –Ω–∞ —Å—Ç—Ä–∏–º–µ, –æ—Ç–¥–∞–µ–º –¥–æ–ª–∂–Ω–æ–µ @easygoy. !mpenis - —Ä–∞–∑–º–µ—Ä –ø–∏—Å—é–Ω–∞, !mmyiq - —Ç–≤–æ–π iq, !mboobs - —Ä–∞–∑–º–µ—Ä –±—É–±—Å, !–ø–æ—Ç–≤–æ—Ä–∏ - –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ–∫—Å—Ç')


# --------------------------------------------------------------------------------

@bot.command(name='–ø–æ–¥–∞—Ä–æ–∫')
async def getgift(ctx):
    await ctx.send(f'{ctx.author.name}, —ç—Ç–æ –¥–ª—è —Ç–µ–±—è üëâüëà üéÅ ')


@bot.command(name='—Å–º—ç—Ä—Ç')
async def datesmert(ctx):
    current_year = datetime.now().year
    random_year = random.randint(current_year, current_year + 126)
    random_date = datetime(random_year, random.randint(1, 12), random.randint(1, 28))
    await ctx.send(f'{ctx.author.name}, —Ç–≤–æ—è —Å–º–µ—Ä—Ç—å –Ω–∞—Å—Ç—É–ø–∏—Ç {random_date.strftime("%d.%m.%Y")}')


# --------------------------------------------------------------------------------

@bot.command(name='askgpt')
async def ask_gpt(ctx, *, user_input):
    chat_history.history.append(f"User: {user_input}")
    chat_history.history = chat_history.history[-3:]
    input_prompt = "\n".join(chat_history.history)

    try:
        response = openai.Completion.create(
            engine="gpt-3.5-turbo-instruct",
            prompt=input_prompt,
            max_tokens=100
        )

        generated_text = response['choices'][0]['text'].strip()

        if generated_text.startswith("Bot:"):
            generated_text = generated_text[len("Bot:"):].strip()

        if response['usage']['total_tokens'] >= 100:
            match = re.search(r'\.', generated_text)
            if match:
                generated_text = generated_text[:match.end()]

        chat_history.history.append(f"Bot: {generated_text}")
        await ctx.send(generated_text)

    except openai.error.OpenAIError as e:
        await ctx.send(f"–û–π –±–ª—è—è—è—è—è—è—è...: {str(e)}")


# --------------------------------------------------------------------------------

lottery_started = False
correct_numbers = random.sample(range(1, 10), 2)
selected_numbers = []
lottery_starter = None


@bot.command(name='–ª–æ—Ç–µ—Ä–µ—è')
async def start_lottery(ctx):
    global lottery_started, correct_numbers, selected_numbers, lottery_starter

    if not lottery_started:
        lottery_started = True
        lottery_starter = ctx.author.name
        correct_numbers = random.sample(range(1, 10), 2)
        selected_numbers = []
        await ctx.send(
            f'*Ã•Àö–õ–æ—Ç–µ—Ä–µ—è! –í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 9 —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã !–ª [—á–∏—Å–ª–æ]. –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å 7 –¥–µ–Ω—é–∂–µ–∫. –ï—Å–ª–∏ –ø–æ–ø–∞–¥–µ—Ç–µ –≤ —Ö–æ—Ç—å –æ–¥–∏–Ω —á–µ—Ä–µ–ø, –≤—ã –ª–æ—Ö')

        await asyncio.sleep(120)

        if lottery_started:
            lottery_started = False
            await ctx.send('–ù—É –∏ –∏–¥–∏—Ç–µ –Ω–∞—Ö—É–π! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞')
            return


@bot.command(name='–ª')
async def play_lottery(ctx, number: int):
    global lottery_started, correct_numbers, selected_numbers, lottery_starter

    if lottery_started and ctx.author.name == lottery_starter:
        if number in selected_numbers:
            await ctx.send(f'–≠—Ç–æ —á–∏—Å–ª–æ —É–∂–µ –±—ã–ª–æ!')
        elif 1 <= number <= 9:
            selected_numbers.append(number)
            if number in correct_numbers:
                await ctx.send(f'–í—ã –ª–æ—Ö!')
                lottery_started = False
            elif len(selected_numbers) == 7:
                await ctx.send(f'–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ —ç—Ç—É –∂–∏–∑–Ω—å. –î–µ—Ä–∂–∏—Ç–µ –∫–æ–Ω—Ñ–µ—Ç–∫—É üç¨')
                lottery_started = False
            else:
                await ctx.send(f'–ß–∏—Å–ª–æ {number} $')
        else:
            await ctx.send('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 9.')
    elif not lottery_started:
        await ctx.send('–õ–æ—Ç–µ—Ä–µ—è –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å. –í–≤–µ–¥–∏—Ç–µ !–ª–æ—Ç–µ—Ä–µ—è, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!')
    else:
        await ctx.send('–í—ã —Ö—É?')


# --------------------------------------------------------------------------------

@bot.command(name='pisun')
async def manipulate_pisun(ctx):
    user_name = ctx.author.name
    user_id = ctx.author.id

    if user_name not in user_data:
        user_data[user_name] = {'rating': 0, 'last_command_time': datetime.now() - timedelta(hours=6),
                                'user_id': user_id}

    remove_inactive_users(user_data)
    current_time = datetime.now()
    last_command_time = user_data[user_name]['last_command_time']
    last_command_username = user_data[user_name].get('last_command_username', user_name)

    if (current_time - last_command_time).total_seconds() >= 6 * 60 * 60:
        change_amount = random.choices(range(-10, 11), weights=[30] * 10 + [70] * 11)[0]
        user_data[user_name]['rating'] += change_amount
        user_data[user_name]['last_command_time'] = current_time
        user_data[user_name]['last_change_amount'] = change_amount
        user_data[user_name]['last_command_username'] = user_name
        user_data[user_name]['user_id'] = user_id

        if change_amount > 0:
            await ctx.send(f'{user_name}, –≤–∞—à –ø–∏—Å—é–Ω –≤—ã—Ä–æ—Å –Ω–∞ {change_amount} —Å–º! üëÄ')
        elif change_amount < 0:
            await ctx.send(f'{user_name}, –≤–∞—à –ø–∏—Å—é–Ω –æ—Ç—Ä–µ–∑–∞–ª–∏ –Ω–∞ {abs(change_amount)} —Å–º! ‚úÇ')
        else:
            await ctx.send(f'{user_name}, –º—ã –ø–æ—Ç–µ—Ä—è–ª–∏ –≤–∞—à—É –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É. 0 —Å–º')

        if user_data[user_name]['user_id'] == user_id and last_command_username != user_name:
            try:
                await ctx.author.edit(nick=user_name)
            except Exception as e:
                print(f"–ë—Ä—É—Ö: {e}")

        save_user_data(user_data)
    else:
        time_remaining = (last_command_time + timedelta(hours=6) - current_time).total_seconds()
        hours, minutes, seconds = format_time(time_remaining)
        await ctx.send(
            f'{last_command_username}, –≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø—Ä–∏–µ–º –Ω–∞—Å—Ç—É–ø–∏—Ç —á–µ—Ä–µ–∑ {hours} —á–∞—Å–æ–≤, {minutes} –º–∏–Ω—É—Ç, {seconds} —Å–µ–∫—É–Ω–¥')


@bot.command(name='top10')
async def show_ratings(ctx):
    sorted_users = sorted(user_data.items(), key=lambda x: x[1]['rating'], reverse=True)[:10]

    ratings_msg = '‚á¢–†–µ–π—Ç–∏–Ω–≥ –ø–∏—Å—é–Ω–æ–≤‚á† : \n'
    for i, (user_name, data) in enumerate(sorted_users, 1):
        last_command_username = user_data[user_name].get('last_command_username', user_name)
        user_id = user_data[user_name].get('user_id', 'UnknownID')

        ratings_msg += f'{i}. {last_command_username}: {data["rating"]} —Å–º \n'

    await ctx.send(ratings_msg)


@bot.command(name='top-10')
async def show_ratings(ctx):
    sorted_users = sorted(user_data.items(), key=lambda x: x[1]['rating'], reverse=False)[:10]

    ratings_msg = '‚á¢–†–µ–π—Ç–∏–Ω–≥ –ø–∏—Å—é–Ω–æ–≤‚á† : \n'
    for i, (user_name, data) in enumerate(sorted_users, 1):
        last_command_username = user_data[user_name].get('last_command_username', user_name)
        user_id = user_data[user_name].get('user_id', 'UnknownID')

        ratings_msg += f'{i}. {last_command_username}: {data["rating"]} —Å–º \n'

    await ctx.send(ratings_msg)


@bot.command(name='mypisun')
async def show_user_pisun(ctx):
    user_name = ctx.author.name

    if user_name not in user_data:
        user_data[user_name] = {'rating': 0, 'last_command_time': datetime.now() - timedelta(days=1)}

    user_rating = user_data[user_name]['rating']
    last_change_amount = user_data[user_name].get('last_change_amount', 0)

    last_command_username = user_data[user_name].get('last_command_username', user_name)
    await ctx.send(f'{last_command_username}, —Ä–∞–∑–º–µ—Ä –≤–∞—à–µ–≥–æ –ø–∏—Å—é–Ω–∞ {user_rating} —Å–º.')

    user_data[user_name]['last_change_amount'] = last_change_amount
    user_data[user_name]['last_command_username'] = last_command_username
    save_user_data(user_data)


# --------------------------------------------------------------------------------

@bot.command(name='mpenis')
async def mpenis(ctx):
    user_name = ctx.author.name
    penis_size = random.randint(0, 55)
    if 50 <= penis_size <= 55 or penis_size == 0:
        paschal_text = get_paschal_message(penis_paschal, penis_size)
        await ctx.send(f'{user_name}, —Ç–≤–æ–π –ø–∏—Å—é–Ω:\n {paschal_text}')
    else:
        paschal_text = get_paschal_message(penis_paschal, penis_size)
        await ctx.send(f'{user_name}, —Ç–≤–æ–π –ø–∏—Å—é–Ω: {penis_size} —Å–º\n {paschal_text}')


@bot.command(name='mmyiq')
async def mmyiq(ctx):
    user_name = ctx.author.name
    iq = random.randint(-1, 300)
    paschal_text = get_paschal_message(iq_paschal, iq)
    await ctx.send(f'{user_name}, —Ç–≤–æ–π IQ {iq}\n {paschal_text}!')


@bot.command(name='mboobs')
async def mboobs(ctx):
    user_name = ctx.author.name
    boobs_size = random.randint(0, 5)

    if boobs_size == 0:
        paschal_text = get_paschal_message(boobs_paschal, boobs_size)
        await ctx.send(f'{user_name}, —Ä–∞–∑–º–µ—Ä —Ç–≤–æ–∏—Ö –±—É–±—Å: {paschal_text}')
    else:
        paschal_text = get_paschal_message(boobs_paschal, boobs_size)
        await ctx.send(f'{user_name}, —Ä–∞–∑–º–µ—Ä —Ç–≤–æ–∏—Ö –±—É–±—Å: {boobs_size}\n {paschal_text}')


# --------------------------------------------------------------------------------

@bot.command(name='–ø–æ–≤—Ç–æ—Ä–∏')
async def repeat_message(ctx, *, message):
    if message.lower() in voices:
        await ctx.send("üñï")
    else:
        await ctx.send(message)


@bot.command(name='–≥–æ–ª–æ—Å')
async def voice_command(ctx):
    selected_voice = random.choice(voices)
    await ctx.send(f'–í—ã–±–æ—Ä: {selected_voice}')


# --------------------------------------------------------------------------------

password_game = PasswordGame()
game_in_progress = False


@bot.command(name='password')
async def start_game(ctx):
    global game_in_progress

    if not game_in_progress:
        password_game.__init__()
        game_in_progress = True
        await ctx.send('?–í—ã –∏–∑ —ç—Ç–∏—Ö –∑–∞–¥—Ä–æ—Ç–æ–≤ –≤ —Å–º–µ—Ä—Ç–µ–ª–∫—É? !–ø [–°–ª–æ–≤–æ –∏–∑ 4 –±—É–∫–≤]')
    else:
        await ctx.send('–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞—Ç–∞. –í–≤–µ–¥–∏—Ç–µ !–æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É.')


@bot.command(name='–ø')
async def make_guess(ctx, *, guess: str):
    global game_in_progress

    if game_in_progress:
        if len(guess) == 4 and guess.isalpha():
            guess = guess.lower()

            for i in range(4):
                if i < len(password_game.password) and guess[i] == password_game.password[i]:
                    password_game.correct_guesses.add(i)

            if len(password_game.correct_guesses) == 4:
                await ctx.send(f'{ctx.author.name}, —Ç—ã —É–º–Ω—ã–π. –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞')
                password_game.__init__()
                game_in_progress = False
        else:
            await ctx.send('–ù–æ—É–ø')

        partial_password_message = password_game.display_partial_password()
        await ctx.send(partial_password_message)
    else:
        await ctx.send('–ò–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞—Ç–∞. –í–≤–µ–¥–∏—Ç–µ !password, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É.')


@bot.command(name='–æ—Ç–≤–µ—Ç')
async def end_game(ctx):
    global game_in_progress

    if game_in_progress:
        await ctx.send(f'–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å: {password_game.password}')
        password_game.__init__()
        game_in_progress = False
    else:
        await ctx.send('–ò–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å. –í–≤–µ–¥–∏—Ç–µ !password, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É.')


if __name__ == "__main__":
    bot.run()
